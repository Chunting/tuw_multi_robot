#!/usr/bin/env python
PACKAGE = "tuw_multi_robot_router"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("voronoi_graph",         bool_t,    0,  "Defines if the generated Graph is a voronoi one (in doubt use false)", False)
gen.add("router_time_limit_s",   double_t,  0,  "Sets the upper limit for a planning approach. (router time is not overall time)", 10, 0.1, 300);
collision_resolver_type =   gen.enum([  gen.const("None",           int_t, 0, "No collision Resolver (Standard A-Star)"),
                                        gen.const("Backtracking",   int_t, 1, "Backtracking (includes wait steps)"),
                                        gen.const("Avoidance",      int_t, 2, "Avoidance (includes wait steps and can avoid other robots in crossings)")],
                                        "Collision resolver type")

gen.add("collision_resolver", int_t, 0, "The used collision resolver for the multi robot planner", 2, 0, 2, edit_method=collision_resolver_type)

goal_mode_en = gen.enum([  gen.const("use_map_goal",       int_t, 0, "endpoint is maped to the real endpoint"),
                           gen.const("use_voronoi_goal",   int_t, 1, "endpoint is mapped to the end point on the segment"),
                           gen.const("use_segment_goal",   int_t, 2, "endpoint is mapped to the corresponding segment endpoint")],
                           "Collision resolver type")

gen.add("goal_mode", int_t, 0, "The endpoint mode", 1, 0, 2, edit_method=goal_mode_en)


exit(gen.generate(PACKAGE, "tuw_multi_robot_router", "MultiRobotRouter"))
 
